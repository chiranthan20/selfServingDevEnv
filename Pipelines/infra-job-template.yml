parameters:
  - name: 'SubscriptionName'
    type: string
  - name: 'DryRun'
    type: boolean
    default: false
  - name: Backend
    type: string
  - name: barewindowsVM
    type: boolean
  - name: productName
    type: string
  - name: appName
    type: string

jobs:
  - job: ProvisionDevInfra
    timeoutInMinutes: 100
    steps:
    - template: ../common/iac-installation-ubuntu.yml@self

    - task: AzureCLI@2
      displayName: Create Resource Group and Storage Account if not exist
      inputs:
        azureSubscription:  '${{parameters.SubscriptionName}}'
        addSpnToEnvironment: true
        scriptType: bash
        scriptLocation: inlineScript
        failOnStandardError: false 
        inlineScript: |
          sh ../../ci/vm-setup.sh vmimageRG '${{ parameters.Backend }}terraforminfra' terraformstate ${{ parameters.Backend }}
        workingDirectory: infra/terraform
        
    - task: AzureCLI@2
      displayName: Validate VM Terraform Code
      inputs:
        azureSubscription:  '${{parameters.SubscriptionName}}'
        addSpnToEnvironment: true
        scriptType: bash
        scriptLocation: inlineScript
        failOnStandardError: true 
        inlineScript: |
            sh ../../ci/validatetf.sh "${{ parameters.Backend }}.tfbackend" "vm" "./${{ parameters.Backend }}/variables.tfvars"
        workingDirectory: infra/terraform
        
    - ${{ if and(eq(parameters.DryRun, false), ne(parameters.productName, '')) }}:  
      - task: AzureCLI@2
        displayName: Provide Custom VM
        inputs:
          azureSubscription: '${{parameters.SubscriptionName}}'
          addSpnToEnvironment: true
          failOnStandardError: true
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            export ARM_CLIENT_ID=$servicePrincipalId
            export ARM_CLIENT_SECRET=$servicePrincipalKey
            export ARM_SUBSCRIPTION_ID=$(az account list --query "[?isDefault].id | [0]" | xargs)
            export ARM_TENANT_ID=$tenantId
            terraform apply -auto-approve
          workingDirectory: infra/terraform/vm

    - ${{ if eq(parameters.barewindowsVM, true) }}:   
      - task: AzureCLI@2
        displayName: Provision Bare VM
        inputs:
          azureSubscription: '${{parameters.SubscriptionName}}'
          addSpnToEnvironment: true
          failOnStandardError: true
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            export ARM_CLIENT_ID=$servicePrincipalId
            export ARM_CLIENT_SECRET=$servicePrincipalKey
            export ARM_SUBSCRIPTION_ID=$(az account list --query "[?isDefault].id | [0]" | xargs)
            export ARM_TENANT_ID=$tenantId
            USER_EMAIL=$(echo $BUILD_REQUESTEDFOREMAIL)
            echo "Looking up Azure AD user for $USER_EMAIL"
            export USER_OBJECT_ID=$(az ad user show --id $USER_EMAIL --query id -o tsv)
            terraform apply -auto-approve -var "user_object_id=$USER_OBJECT_ID"
          workingDirectory: infra/terraform/bareVM

    - ${{ if ne(parameters.appName, '') }}:
      - task: AzureCLI@2
        displayName: Provision ACI
        inputs:
          azureSubscription: '${{parameters.SubscriptionName}}'
          addSpnToEnvironment: true
          failOnStandardError: true
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            export ARM_CLIENT_ID=$servicePrincipalId
            export ARM_CLIENT_SECRET=$servicePrincipalKey
            export ARM_SUBSCRIPTION_ID=$(az account list --query "[?isDefault].id | [0]" | xargs)
            export ARM_TENANT_ID=$tenantId
            terraform apply -auto-approve -var="container_name=${{ parameters.appName }}" -var="image=myregistry.azurecr.io/${{ parameters.appName }}" -var="dns_name_label=${{ parameters.appName }}"
          workingDirectory: infra/terraform/aci
